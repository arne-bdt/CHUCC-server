openapi: 3.1.0
info:
  title: SPARQL 1.2 Protocol with Version Control Extension
  version: 0.1.0
  description: |
    Complete specification of the SPARQL 1.2 Protocol with Version Control Extension.

    This API provides:
    - Standard SPARQL 1.2 query and update operations
    - Version control features: branches, commits, merges, history, time-travel
    - Backward-compatible design (non-versioned operations work on default branch)

    See: https://www.w3.org/TR/sparql12-protocol/
  contact:
    name: SPARQL VC Protocol
    url: https://github.com/yourusername/CHUCC-server
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: /
    description: Default server

paths:
  # =========================================================================
  # SPARQL 1.2 Protocol - Core Endpoints
  # =========================================================================

  /sparql:
    get:
      summary: SPARQL Query (GET)
      description: |
        Execute a SPARQL query using HTTP GET.

        Version control: Query parameters `branch`, `commit`, or `asOf` select the dataset state.
        Without these, queries execute against the default branch HEAD.
      operationId: querySparqlGet
      tags:
        - SPARQL Protocol
      parameters:
        - name: query
          in: query
          required: true
          description: The SPARQL query string
          schema:
            type: string
            example: "SELECT * WHERE { ?s ?p ?o } LIMIT 10"
        - $ref: '#/components/parameters/DefaultGraphUri'
        - $ref: '#/components/parameters/NamedGraphUri'
        - $ref: '#/components/parameters/BranchParam'
        - $ref: '#/components/parameters/CommitParam'
        - $ref: '#/components/parameters/AsOfParam'
      responses:
        '200':
          description: Query results
          headers:
            ETag:
              description: Commit id of the queried state
              schema:
                $ref: '#/components/schemas/CommitId'
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResultsJson'
            application/sparql-results+xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
            text/tab-separated-values:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/Problem'

    post:
      summary: SPARQL Query or Update (POST)
      description: |
        Execute a SPARQL query or update using HTTP POST.

        - Content-Type: application/sparql-query → Query operation
        - Content-Type: application/sparql-update → Update operation (creates commit)
        - Content-Type: application/x-www-form-urlencoded → Query or update based on form fields
      operationId: executeSparqlPost
      tags:
        - SPARQL Protocol
      parameters:
        - $ref: '#/components/parameters/MessageHeader'
        - $ref: '#/components/parameters/AuthorHeader'
      requestBody:
        required: true
        content:
          application/sparql-query:
            schema:
              type: string
              description: SPARQL query string
            example: |
              PREFIX foaf: <http://xmlns.com/foaf/0.1/>
              SELECT ?name WHERE { ?person foaf:name ?name }
          application/sparql-update:
            schema:
              type: string
              description: SPARQL update request
            example: |
              PREFIX dc: <http://purl.org/dc/elements/1.1/>
              INSERT DATA { <http://example.org/book1> dc:title "A new book" }
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: SPARQL query (if query operation)
                update:
                  type: string
                  description: SPARQL update (if update operation)
                default-graph-uri:
                  type: array
                  items:
                    type: string
                    format: uri
                named-graph-uri:
                  type: array
                  items:
                    type: string
                    format: uri
      responses:
        '200':
          description: Query results or update confirmation with representation
          headers:
            ETag:
              description: Commit id (new for updates, queried for queries)
              schema:
                $ref: '#/components/schemas/CommitId'
            Location:
              description: URI of created commit (for updates)
              schema:
                type: string
                format: uri
          content:
            application/sparql-results+json:
              schema:
                $ref: '#/components/schemas/SparqlResultsJson'
            application/json:
              schema:
                $ref: '#/components/schemas/Commit'
        '204':
          description: Update succeeded without representation
          headers:
            ETag:
              description: New commit id
              schema:
                $ref: '#/components/schemas/CommitId'
            Location:
              description: URI of created commit
              schema:
                type: string
                format: uri
        '400':
          $ref: '#/components/responses/BadRequest'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        default:
          $ref: '#/components/responses/Problem'

  # =========================================================================
  # Version Control Extension - Branch Management
  # =========================================================================
  /version/branches:
    get:
      summary: List branches
      operationId: listBranches
      tags:
        - Version Control
      parameters:
        - $ref: '#/components/parameters/Accept'
      responses:
        '200':
          description: Branch list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchList'
        default:
          $ref: '#/components/responses/Problem'
    post:
      summary: Create branch
      operationId: createBranch
      tags:
        - Version Control
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateBranchRequest' }
      responses:
        '201':
          description: Branch created
          headers:
            Location:
              description: URL of the created branch
              schema: { type: string, format: uri }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Branch' }
        default:
          $ref: '#/components/responses/Problem'

  /version/branches/{name}:
    parameters:
      - $ref: '#/components/parameters/BranchName'
    get:
      summary: Get branch
      operationId: getBranch
      tags:
        - Version Control
      responses:
        '200':
          description: Branch info
          headers:
            ETag:
              description: Head commit id (strong ETag)
              schema: { $ref: '#/components/schemas/CommitId' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Branch' }
        default:
          $ref: '#/components/responses/Problem'
    delete:
      summary: Delete branch
      operationId: deleteBranch
      tags:
        - Version Control
      responses:
        '204':
          description: Deleted
        default:
          $ref: '#/components/responses/Problem'
    post:
      summary: Reset branch (move ref)
      description: Move branch ref (hard/soft) to target commit
      operationId: resetBranch
      tags:
        - Version Control
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BranchResetRequest' }
      responses:
        '200':
          description: After reset
          headers:
            ETag:
              description: New head commit id
              schema: { $ref: '#/components/schemas/CommitId' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Branch' }
        default:
          $ref: '#/components/responses/Problem'

  /version/commits/{id}:
    parameters:
      - $ref: '#/components/parameters/CommitIdParam'
    get:
      summary: Get commit metadata
      operationId: getCommit
      tags:
        - Version Control
      responses:
        '200':
          description: Commit metadata
          headers:
            ETag:
              description: Commit id (strong)
              schema: { $ref: '#/components/schemas/CommitId' }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Commit' }
        default:
          $ref: '#/components/responses/Problem'

  /version/commits/{id}/changes:
    parameters:
      - $ref: '#/components/parameters/CommitIdParam'
    get:
      summary: Get materialized changeset
      operationId: getCommitChanges
      tags:
        - Version Control
      responses:
        '200':
          description: Changeset
          content:
            text/rdf-patch:
              schema:
                type: string
                description: RDF Patch payload
        default:
          $ref: '#/components/responses/Problem'

  /version/history:
    get:
      summary: List history
      operationId: listHistory
      tags:
        - Version Control
      parameters:
        - $ref: '#/components/parameters/BranchParam'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Since'
        - $ref: '#/components/parameters/Until'
        - name: author
          in: query
          schema: { type: string }
      responses:
        '200':
          description: History
          headers:
            Link:
              description: RFC 5988 pagination links
              schema: { type: string }
          content:
            application/json:
              schema: { $ref: '#/components/schemas/History' }
        default:
          $ref: '#/components/responses/Problem'

  /version/diff:
    get:
      summary: Diff two commits
      operationId: diffCommits
      tags:
        - Version Control
      parameters:
        - name: from
          in: query
          required: true
          schema: { $ref: '#/components/schemas/CommitId' }
        - name: to
          in: query
          required: true
          schema: { $ref: '#/components/schemas/CommitId' }
      responses:
        '200':
          description: Changeset between from→to
          content:
            text/rdf-patch:
              schema:
                type: string
        default:
          $ref: '#/components/responses/Problem'

  /version/blame:
    get:
      summary: Last-writer attribution
      operationId: blameResource
      tags:
        - Version Control
      parameters:
        - name: subject
          in: query
          required: true
          schema: { type: string, format: uri }
      responses:
        '200':
          description: Blame/annotate info
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Blame' }
        default:
          $ref: '#/components/responses/Problem'

  /version/merge:
    post:
      summary: Merge branches/commits
      operationId: mergeBranches
      tags:
        - Version Control
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MergeRequest' }
      responses:
        '200':
          description: Merge result (fast-forward or auto-merge)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/MergeResult' }
        '409':
          description: Merge conflict
          content:
            application/problem+json:
              schema: { $ref: '#/components/schemas/Problem' }
        default:
          $ref: '#/components/responses/Problem'

  /version/tags:
    get:
      summary: List tags
      operationId: listTags
      tags:
        - Version Control
      responses:
        '200':
          description: Tags
          content:
            application/json:
              schema: { $ref: '#/components/schemas/TagList' }
        default:
          $ref: '#/components/responses/Problem'
    post:
      summary: Create tag (immutable)
      operationId: createTag
      tags:
        - Version Control
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CreateTagRequest' }
      responses:
        '201':
          description: Tag created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Tag' }
        default:
          $ref: '#/components/responses/Problem'

  /version/batch:
    post:
      summary: Apply batch of SPARQL Updates
      description: Applies a sequence atomically; either one combined commit or multiple commits.
      operationId: batchUpdate
      tags:
        - Version Control
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/BatchRequest' }
      responses:
        '200':
          description: Batch result
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BatchResult' }
        default:
          $ref: '#/components/responses/Problem'

components:
  parameters:
    # =========================================================================
    # SPARQL Protocol Parameters
    # =========================================================================
    DefaultGraphUri:
      name: default-graph-uri
      in: query
      description: Default graph URI(s) for the query
      schema:
        type: array
        items:
          type: string
          format: uri

    NamedGraphUri:
      name: named-graph-uri
      in: query
      description: Named graph URI(s) for the query
      schema:
        type: array
        items:
          type: string
          format: uri

    # =========================================================================
    # Version Control Parameters (Query)
    # =========================================================================
    BranchParam:
      name: branch
      in: query
      description: Target branch for query/update (default branch if not specified)
      schema:
        $ref: '#/components/schemas/BranchName'

    CommitParam:
      name: commit
      in: query
      description: Target commit for query (read-only, cannot be combined with branch or asOf)
      schema:
        $ref: '#/components/schemas/CommitId'

    AsOfParam:
      name: asOf
      in: query
      description: Query branch state at or before this timestamp (RFC3339/ISO8601, inclusive)
      schema:
        type: string
        format: date-time
        example: "2025-10-04T12:30:00Z"

    # =========================================================================
    # Version Control Headers
    # =========================================================================
    MessageHeader:
      name: SPARQL-VC-Message
      in: header
      description: Commit message (SHOULD provide for update operations)
      required: false
      schema:
        type: string
        example: "Update person data"

    AuthorHeader:
      name: SPARQL-VC-Author
      in: header
      description: Commit author (SHOULD provide for update operations)
      required: false
      schema:
        type: string
        example: "alice@example.org"

    # =========================================================================
    # Common Parameters
    # =========================================================================
    Accept:
      name: Accept
      in: header
      schema: { type: string }

    BranchName:
      name: name
      in: path
      required: true
      schema: { $ref: '#/components/schemas/BranchName' }
    CommitIdParam:
      name: id
      in: path
      required: true
      schema: { $ref: '#/components/schemas/CommitId' }

    Limit:
      name: limit
      in: query
      schema: { type: integer, minimum: 1, maximum: 1000, default: 100 }
    Offset:
      name: offset
      in: query
      schema: { type: integer, minimum: 0, default: 0 }
    Since:
      name: since
      in: query
      description: RFC3339 timestamp (inclusive)
      schema: { type: string, format: date-time }
    Until:
      name: until
      in: query
      description: RFC3339 timestamp (inclusive)
      schema: { type: string, format: date-time }

  responses:
    BadRequest:
      description: Bad Request - Invalid parameters or malformed request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            selector_conflict:
              value:
                type: "about:blank"
                title: "Bad Request"
                status: 400
                code: "selector_conflict"
                detail: "Cannot combine 'commit' parameter with 'branch' or 'asOf'"

    PreconditionFailed:
      description: Precondition Failed - ETag mismatch (optimistic concurrency failure)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          examples:
            etag_mismatch:
              value:
                type: "about:blank"
                title: "Precondition Failed"
                status: 412
                code: "etag_mismatch"
                detail: "Expected ETag does not match current branch head"

    Problem:
      description: Error (RFC7807)
      content:
        application/problem+json:
          schema: { $ref: '#/components/schemas/Problem' }

  schemas:
    # =========================================================================
    # SPARQL Protocol Schemas
    # =========================================================================
    SparqlResultsJson:
      type: object
      description: SPARQL Query Results JSON Format (SPARQL 1.1)
      required: [head, results]
      properties:
        head:
          type: object
          required: [vars]
          properties:
            vars:
              type: array
              items:
                type: string
              description: Ordered list of query variable names (without '?' prefix)
            link:
              type: array
              items:
                type: string
                format: uri
        results:
          type: object
          required: [bindings]
          properties:
            bindings:
              type: array
              items:
                type: object
                additionalProperties:
                  oneOf:
                    - $ref: '#/components/schemas/SparqlUriBinding'
                    - $ref: '#/components/schemas/SparqlLiteralBinding'
                    - $ref: '#/components/schemas/SparqlBnodeBinding'
        boolean:
          type: boolean
          description: Present for ASK queries instead of results
      example:
        head:
          vars: ["name", "age"]
        results:
          bindings:
            - name:
                type: "literal"
                value: "Alice"
              age:
                type: "literal"
                value: "30"
                datatype: "http://www.w3.org/2001/XMLSchema#integer"

    SparqlUriBinding:
      type: object
      required: [type, value]
      properties:
        type:
          type: string
          enum: ["uri"]
        value:
          type: string
          format: uri

    SparqlLiteralBinding:
      type: object
      required: [type, value]
      properties:
        type:
          type: string
          enum: ["literal"]
        value:
          type: string
        datatype:
          type: string
          format: uri
        xml:lang:
          type: string
          description: Language tag (BCP47)

    SparqlBnodeBinding:
      type: object
      required: [type, value]
      properties:
        type:
          type: string
          enum: ["bnode"]
        value:
          type: string
          description: Blank node identifier

    # =========================================================================
    # Version Control Schemas - Core Types
    # =========================================================================
    BranchName:
      type: string
      pattern: '^[A-Za-z0-9._\-]+$'
    CommitId:
      type: string
      description: UUIDv7 textual form (8-4-4-4-12)
      pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-7[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$'
    Branch:
      type: object
      required: [name, head]
      properties:
        name: { $ref: '#/components/schemas/BranchName' }
        head: { $ref: '#/components/schemas/CommitId' }
        createdAt: { type: string, format: date-time }
    BranchList:
      type: array
      items: { $ref: '#/components/schemas/Branch' }

    CreateBranchRequest:
      $ref: 'schemas/create-branch.json'

    BranchResetRequest:
      type: object
      required: [to]
      properties:
        to:
          oneOf:
            - $ref: '#/components/schemas/CommitId'
            - $ref: '#/components/schemas/BranchName'
        mode:
          type: string
          enum: [hard, soft]
          default: hard

    Commit:
      type: object
      required: [id, parents, author, message, committedAt]
      properties:
        id: { $ref: '#/components/schemas/CommitId' }
        parents:
          type: array
          items: { $ref: '#/components/schemas/CommitId' }
        author: { type: string }
        message: { type: string }
        committedAt: { type: string, format: date-time }
        contentHash: { type: string, nullable: true, description: 'Optional integrity hash' }

    History:
      type: object
      required: [branch, commits]
      properties:
        branch: { $ref: '#/components/schemas/BranchName' }
        commits:
          type: array
          items: { $ref: '#/components/schemas/Commit' }

    MergeRequest:
      $ref: 'schemas/merge.json'
    Conflict:
      $ref: 'schemas/conflict.json'
    MergeResult:
      type: object
      required: [result]
      properties:
        result:
          type: string
          enum: [fast-forward, merged]
        commit:
          allOf:
            - { $ref: '#/components/schemas/Commit' }
          description: Present if a new merge commit was created.
        conflicts:
          type: array
          items: { $ref: '#/components/schemas/Conflict' }
          description: Empty or omitted on success.

    Tag:
      type: object
      required: [name, commit]
      properties:
        name: { type: string, pattern: '^[A-Za-z0-9._\-]+$' }
        commit: { $ref: '#/components/schemas/CommitId' }
        message: { type: string, nullable: true }
        author: { type: string, nullable: true }
        createdAt: { type: string, format: date-time }
    TagList:
      type: array
      items: { $ref: '#/components/schemas/Tag' }
    CreateTagRequest:
      type: object
      required: [name, commit]
      properties:
        name: { type: string, pattern: '^[A-Za-z0-9._\-]+$' }
        commit: { $ref: '#/components/schemas/CommitId' }
        message: { type: string, nullable: true }
        author: { type: string, nullable: true }

    Blame:
      type: object
      required: [subject, attributions]
      properties:
        subject: { type: string, format: uri }
        attributions:
          type: array
          items:
            type: object
            required: [predicate, object, commit, author, committedAt]
            properties:
              predicate: { type: string, format: uri }
              object: { type: string }
              commit: { $ref: '#/components/schemas/CommitId' }
              author: { type: string }
              committedAt: { type: string, format: date-time }

    BatchRequest:
      type: object
      required: [mode, updates]
      properties:
        mode:
          type: string
          enum: [single, multiple]
          default: single
        branch:
          $ref: '#/components/schemas/BranchName'
        ifMatch:
          description: Use strong ETag of branch for optimistic concurrency
          type: string
        updates:
          type: array
          minItems: 1
          items:
            type: object
            required: [sparql]
            properties:
              sparql: { type: string, description: SPARQL Update text }
              message: { type: string }
              author: { type: string }

    BatchResult:
      type: object
      oneOf:
        - properties:
            mode: { const: single }
            commit: { $ref: '#/components/schemas/Commit' }
          required: [mode, commit]
        - properties:
            mode: { const: multiple }
            commits:
              type: array
              items: { $ref: '#/components/schemas/Commit' }
          required: [mode, commits]

    Problem:
      $ref: 'schemas/problem.json'
